# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
# ===================================================================
management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include:
          ['configprops', 'env', 'health', 'info', 'logfile', 'loggers', 'threaddump']
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  info:
    git:
      mode: full
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

server:
  port: 8080

spring:
  application:
    name: spring-boot-multi-module
  profiles:
    # The commented value for `active` can be replaced with valid Spring profiles to load.
    # Otherwise, it will be filled in by maven when building the JAR file
    # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
    active: #spring.profiles.active#
    group:
      dev:
        - dev
  jmx:
    enabled: false
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  output:
    ansi:
      enabled: detect
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# ===================================================================

application:
  name: ${spring.application.name}
  client-id: spring-boot-multi-module

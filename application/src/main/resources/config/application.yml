# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
# ===================================================================
management:
  endpoints:
    web:
      base-path: /management
      exposure:
        include:
          ['configprops', 'env', 'health', 'info', 'logfile', 'loggers', 'threaddump']
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  info:
    git:
      mode: full
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  metrics:
    export:
      # Prometheus is the default metrics backend
      prometheus:
        enabled: true
        step: 60
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
      env: ${spring.profiles.active}

server:
  port: 8080

spring:
  application:
    name: spring-boot-multi-module
  profiles:
    # The commented value for `active` can be replaced with valid Spring profiles to load.
    # Otherwise, it will be filled in by maven when building the JAR file
    # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
    active: #spring.profiles.active#
    group:
      dev:
        - dev
        - api-docs
  web:
    resources:
      add-mappings: false
  mvc:
    throw-exception-if-no-handler-found: true
  jmx:
    enabled: false
  data:
    jpa:
      repositories:
        bootstrap-mode: deferred
  jpa:
    open-in-view: false
    properties:
      hibernate.jdbc.time_zone: UTC
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      # modify batch size as necessary
      hibernate.jdbc.batch_size: 25
      hibernate.order_inserts: true
      hibernate.order_updates: true
      hibernate.query.fail_on_pagination_over_collection_fetch: true
      hibernate.query.in_clause_parameter_padding: true
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
  messages:
    basename: i18n/messages
  main:
    allow-bean-definition-overriding: true
  output:
    ansi:
      enabled: detect
  task:
    execution:
      thread-name-prefix: spring-boot-multi-module-task-
      pool:
        core-size: 8
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: spring-boot-multi-module-scheduling-
      pool:
        size: 2
  kafka:
    bootstrap-servers: localhost:9091,localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
    consumer:
      group-id: spring-boot-multi-module-group
      auto-offset-reset: earliest
      # Configures the Spring Kafka ErrorHandlingDeserializer that delegates to the 'real' deserializers
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        # Delegate deserializers
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.apache.kafka.common.serialization.StringDeserializer

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# ===================================================================

application:
  name: ${spring.application.name}
  client-id: spring-boot-multi-module
  api-docs:
    title: Spring Boot Multi Module API
    description: Spring Boot Multi Module API documentation
    version: 0.0.1
    terms-of-service-url:
    contact-name:
    contact-email:
    contact-url:
    license:
    default-include-pattern: /spring-boot-multi-module/api/.*
    host:
    protocols:
    use-default-response-message: true
  security:
    authentication:
      clients:
        product-service:
          base64-secret: ${PS_SPRING_BOOT_MULTI_MODULE_SECRET}
          token-validity-in-seconds: 300 # token is valid for 5 minutes
          roles: ROLE_CLIENT_PRODUCT_SERVICE
        order-service:
          base64-secret: ${OS_SPRING_BOOT_MULTI_MODULE_SECRET}
          token-validity-in-seconds: 300 # token is valid for 5 minutes
          roles: ROLE_CLIENT_ORDER_SERVICE
        shipping-service:
          base64-secret: ${SS_SPRING_BOOT_MULTI_MODULE_SECRET}
          token-validity-in-seconds: 300 # token is valid for 5 minutes
          roles: ROLE_CLIENT_SHIPPING_SERVICE
        fulfilment-service:
          base64-secret: ${FS_SPRING_BOOT_MULTI_MODULE_SECRET}
          token-validity-in-seconds: 300 # token is valid for 5 minutes
          roles: ROLE_CLIENT_FULFILMENT_SERVICE
  kafka:
    topic:
      test:
        enabled: false
        topic-name: test-topic
      order-status:
        enabled: true
        topic-name: order-status
    consumer:
      error-handler:
        exponential-back-off:
          initial-interval: 5000
          multiplier: 5.0
          max-interval: 60000
          max-elapsed-time: 125000
